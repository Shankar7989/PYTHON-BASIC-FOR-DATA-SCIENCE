# -*- coding: utf-8 -*-
"""python(data science).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GOgj7BiOY7a-HIWffTTLrFjX1uHVc-Qf

PYTHON RELATED TO DATA SCIENCE --- Artifical intelligence is divided in to three types they are narrow AI , super AI and generative AI . Machine learning is the building blocks of the artifical intelligance ,the machine learning is divided in to three types they are -supervised machine learning ,unsupervised machine learning and reinforcement machine learning . Inside the machine learning there is the deep learning ,and deep  learning also furture divided in to the neural networks, they are also be three types - artifical neural networks , conventional neural networks and recurrent neural networks . When you are exploring CNN you find computer vision , when you explore RNN we find the natural language processing .Cv(computer vision) contains images , videos this are based on unstrutured data . NLP contains the text and audio . ANN and RNN are structured data and CNN is unstructured data. And also we are focusing more about the story telling .

There are two types of programing languages they are the compiled and interpretted programing languages. IN compilation there is middle process happen for  checking  the error code and the code is okay is next furture execution . Intepreeted means two steps done at one place complitation and intrepreation at ones . Python is the intepreeted programing language . The frame work of the python is JANGO . There are two types of IDE (integrated development enivronment) online IDE and Offline IDE . OOPS stands for objective oriented program . We are using online IDE platform as google colab .

Variables are the containers that help us to store data or something .There are different types of data types they are - Numerical data , sequentional data and Bollean data and dictionaries and sets . The numerical data is furture divided in to integer , float and complex numbers . The sequentional data is furture divided in to string , tuple and list . The Boolean data contains True or False . ANd remaning are dictionaries and sets.. Any thing that in invited comas reffered as string . Tuples are immutable in nature it means the changes cannot be happend . The data is two types they are muttable and immutable .In muttable in nature the changes are possible .
"""

a='ravi'
b='shankar'
print(a+b)

a='ravi'
b='shankar'
print(a+' '+b)# This type of representation helps to add space between two words

a=('hello world')
print(a)

"""They are three important operators which perform string and list ,they are -concatination .indexing and slicing .Concatination means adding two elements , indexing means fetching the elements in the give list .They are two types of indexing they are positive indexing and negative indexing . Always perform indexing on left to right . And also we have space value and global index value and also we want to indexing in nested list also .Nested list means list inside the list ."""

a='indian ocean '
a[0:5]# positive indexing

a[-9:-4]#negative indexing

first_name='ravi'
last_name='shankar'
print(first_name+' '+last_name)# concatination

"""integers=123
sring='abc'
complex_num=(2,3)
float=123.7
list=[1,2,'ra',2.2]
tupe=[1,2,'ra',2.2]
IN python instead of I we are using J.
"""

x=10
y=5.5
z='hello'
print(x,y,z)

a='ravishankar'
print(a.upper())
print(a.lower())
print(a.capitalize())
print(a.title())

statement='hi my name is ravishankar,hi i am from anantapur ,hi my state is Andrapradesh,hi my country is Hindustan'
print(statement.replace('hi','Hello'))

print(statement.replace('Hello','hi',1)) #Here we are giving particular place to change

statement=[1,2,3,4,5,6,7,8,9,10]
print(statement.count(4))
print(len(statement))
print(sum(statement))
print(max(statement))
print(min(statement))

my_list=['Artifical intelligance','machine learning','deep learning','computer vision','natural language processing']
print(my_list)
my_list.append('data science')
my_list.insert(2,'deeplearning')
my_list.remove('Artifical intelligance')
my_list.pop(1)
my_list.extend([1,556,778,990])

my_list[1:2]
my_list[-9:1]

my_list.clear()

my_list=[1,2,3,4,5,6,7,8,9,10]
print(my_list)
my_list.sort()
print(my_list)
my_list.reverse()
print(my_list)

my_list= ['artifical intelligance','machine learning','deep learning','computer vision','data science','machine learning','deep learning','computer vision']
print(set(my_list))

tupe=('india','china','pakisthan',1,-1,334)
print(tupe)
type(tupe)#tuple are immutable in nature so replacing the tuple is not posssible

memo={'apple','bannana','grapes','papaya','mango'}
print(memo)

memo={'apple':300,'bannana':900,'mango':200,'grapes':100,'papaya':800}

print(memo)

memo.keys()

memo.values()

print(memo)

memo.pop('apple')

memo['chocolates']=900

print(memo)

memo.clear()

print(memo)

memo={'name':'bob','age':66,'city':'newyork','salary':90000}
print(memo)

memo['designation']='data scientist'
print(memo)

memo['salary']=150000
print(memo)

"""In sets we are using functions add and discard
Bollean means true or false
eg- a=20
  b=100
print(a>b)
ans- false
print(a<b)
ans- true

"""

temp=input('enter the OTP')# here there is no condition ,so any number or alpha accepted

temp=int(input("enter your four digit OTP"))# here we give access to integers only ,if you enter alphabets it shows error

temp=float(input("enter your four digit OTP"))# here we give access to float value means 66.6....

keys=['Ten','Twenty','Thirty']
values=[10,20,30]
my_dict=dict(zip(keys,values))
print(my_dict)

dict1={'Ten': 10, 'Twenty': 20, 'Thirty':30}
dict2={'Thirty':30,'Fourty':40,'fifty':50}
dict3={**dict1,**dict2}
print(dict3)

"""if we want to exract keys sample_dict={keys:new_dict[keys]for keys in keys }
if we want to remove keys
 new_dict={a:new_dict[a] for a in new_dict.keys()-keys TO remove}

"""

sampledict={'name':'bob','age':89,'salary':150000,'city':'newyork'}
print(sampledict)

sampledict={'name':'bob','age':89,'salary':150000,'city':'newyork'}
sampledict['location']=sampledict.pop('city')

print(sampledict)

sampledict={
    'emp1':{'name':'bob','salary':177000},
    'emp2':{'name':'ravi','salary':144000},
    'emp3':{'name':'john','salary':130000}
}

sampledict['emp3']['salary']=150000
print(sampledict)

sampleset={'yellow','orange','green'}
samplelist={'blue','red','pink'}
sampleset.update(samplelist)
print(sampleset)

set1={10,20,30,40,60}
set2={40,50,60,70,80}
print(set1.intersection(set2))

set1={10,20,30,40,60}
set2={40,50,60,70,80}
set3=set1.union(set2)
print(set3)

set1.difference_update({10,20,30})
print(set1)

set1={10,20,30,40,60}
set2={40,50,60,70,10,80}

if set1.isdisjoint(set2):
   print("two sets have no elements in common")
else:
  print("two sets have items in common")
  print(set1.intersection(set2))#it determinates wheter or not the following sets have any elements common

set1={10,20,30,40,60}
set2={40,50,60,70,10,80}

set1.symmetric_difference_update(set2)# this function helps to provide same values in the given set1 and set2
print(set1)

"""operators --- There are five types of operators they are -- Arthematic operators , logical operators , assigmental operators , modulo operators and comparision operators .
Arthematic operators --+,-,*,/,//
Assigmental operators ----= and !=
modulo operators ----%
logical operators ---- ANd , or , Not
Comparision operators ---- <,>,=<,>=.

print(1*23)
print(1+44)
print(2/99)
print(44-22)

And operator represents
true and true is true
true and false is false
false and false is true

or operator
true or true is true
false or true is true
false or false is false

Not operator
print(not false)
true
print(not true)
false

conditional statements are if ,else and elif . If we have one condition we are going with if and else and if we have more than one condition we are going with elif stateent . And there is also nested conditional statements . if and if and else and else .
"""

x=int(input('enter the number'))
y=int(input('enter the number'))
if x>y:
  print('x is greater than y')
else:
  print('x is less than y')

marks=int(input('enter the marks'))
if marks>=90:
  print('A grade')
elif marks>=80:
  print('B grade')
elif marks>=70:
  print('B+ grade')
elif marks>=60:
  print('c grade')
elif marks>=50:
  print('d grade')
else :
  print('Better luck next time and do hard')

current_salary=int(input('enter the current salary'))
experience=int(input('enter the experience'))
if experience>=5:
  print('you got salary hike of 10%')
else:
  print('you are waiting on increment line , next year all the best')

x=int(input(' enter the value'))
if x>10:
  if x>20:
    print('x is greater than 20')
  else:
      print('x is less than 10')
else:
  print('x ix <10')

x=int(input('enter the number'))
if x>=10:
  if x>10:
    print('x is greater than 10')
  else:
    print('x is equal to 10')
else:
  print('x is negative')

x=int(input('enter the number'))
if x>10:
  if x>20:
    print('x is greater than 20')
  else:
    print('x is less than 20')
else:
  print('x is less than 10')

"""There are two types of loops they are the while loop and for loop"""

list=[1,2,3,4,54,6,67,7]
for list in list:
  print(list)

for i in range(10):
  print(i)

for i in range(0,10,3):
  print(i)

if i%2!=0:
  print(i)

if i%3==1:
 print(i)

a=1
while a<10:
  print(a)
  a=a+1

a=0
while a<20:
  print(a)
  a=a+2

fruit=['apple','bannana','grapes','papaya','guvava']
for i in fruit:
  if i=='bannana':
     break
     print(i)# here break statement help to drop the bannana and words cannot displayed after the bannnana

fruit=['apple','bannana','grapes','papaya','guvava']
for i in fruit: # removed extra indentation from this line
  if i=='bannana':
    continue
    print(i)

fruit=['apple','bannana','grapes','papaya','guvava']
for i in fruit: # removed extra indentation from this line
  if i=='bannana':
    pass
    print(i)

"""There are two types of functiuons they are buit in functions and User defined dunctions .Append , inset and type are built in functions.Built in functions are not possible to create they are already in the python . Two important ascepts of user defined fuctions they are defining the function and calling the function. Defining function is done by logical thinking."""

def add(a,b):
  c=a+b
  print(c)

def add(a,b):
  sum=a+b
  add(10,20)
  print(sum)

def add(a,b):
  sum=a+b
  print(sum)

add(4,9)

add(8,9)

def compute(a,b):
  add=a+b
  sub=a-b
  mul=a*b
  div=a/b
  print(add,sub,mul,div)

compute(10,5)

def info(name,age,city):
  print('name','age','city')

info('ravi',27,'anantapur')

def name(first_name, second_name):
  print('Hi your first name is first_name')

name('ravi','shankar')

#default arguments
def greet(name,message='Hi how are you?'):
  print(message,name)

greet('ravi',message='good evening')

greet('mukesh',message='go to sleep')

greet('vishnu',message='good luck')

def person(name,salary=900000):
  print(name,salary)

person('ravi',salary=100000)

person('vishnu')

#keyword arguments
def greet(name,age, sex):
  print('message,name','your age is',age)

greet(name='ravi',age=27,sex='male')

"""#in key word arguments while calling the output we want to provide both input and output key values. we are not using collan symbol.In argumentary arguments are helps to take n number of inputs from the users . instead of creating multiple functions like adding 1,2 or 3 we creted the arbitary arguments. Called *args"""

def add(*args):
  print(type(args))
  print(args)

def fun(a,b,*args):
  print(a)
  print(b)
  print(*args)

fun(5,7,786889)

fun(5,6,7,4,2,898899)

"""IN Arbitatry arguments we has both arbitaty and keyword arguments .In same as *args we are using ** kargs"""

def display(**kwargs):
  print(type(kwargs))
  print(kwargs)
  for key,value in kwargs.items():
    print(key,value)

display(name='ravi',age=27,sex='male')

n=int(input('enter the number'))
count=0
sum=0
while count<=n:
  sum=sum+n
  count=count+1
  print(sum)

x=2
y=4
for i in range(x,y):
  print(i)
  if i==3:
    pass
  elif i==4:
    break
  print(i)

x=4
y=10
while x>y:
  x=1
  y+=1
else:
  y=1
  print(y)

x=3
y=6
if x<y:
  if y>10:
    z=x+y
  else:
    z=x-y
else:
  z=x*y
print(z)

x=5
y=3
if x<y:
  z=x+y
elif x<y:
  z=x-y
else:
  z=x+y
print(z)

x=4
y=8
for i in range(x,y):
  if i%2==0:
    pass
  else:
    print(i)

x=6
y=3
if x>y:
  z=x+y
elif x<y:
  z=x-y
else:
  z=x*y
print(z)

my_tupe=(1,2,3)
new_tupe=my_tupe+(4,5,6)
print(new_tupe)